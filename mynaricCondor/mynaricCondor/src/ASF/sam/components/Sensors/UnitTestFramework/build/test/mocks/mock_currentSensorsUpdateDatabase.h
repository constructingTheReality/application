/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CURRENTSENSORSUPDATEDATABASE_H
#define _MOCK_CURRENTSENSORSUPDATEDATABASE_H

#include "unity.h"
#include "currentSensorsUpdateDatabase.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_currentSensorsUpdateDatabase_Init(void);
void mock_currentSensorsUpdateDatabase_Destroy(void);
void mock_currentSensorsUpdateDatabase_Verify(void);




#define eCurrentSensorsUpdateDatabaseLna_IgnoreAndReturn(cmock_retval) eCurrentSensorsUpdateDatabaseLna_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsUpdateDatabaseLna_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseLna_StopIgnore() eCurrentSensorsUpdateDatabaseLna_CMockStopIgnore()
void eCurrentSensorsUpdateDatabaseLna_CMockStopIgnore(void);
#define eCurrentSensorsUpdateDatabaseLna_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensorsUpdateDatabaseLna_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsUpdateDatabaseLna_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseLna_ExpectAndReturn(pxLocalCurrentInputScaling, cmock_retval) eCurrentSensorsUpdateDatabaseLna_CMockExpectAndReturn(__LINE__, pxLocalCurrentInputScaling, cmock_retval)
void eCurrentSensorsUpdateDatabaseLna_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensorsUpdateDatabaseLna_CALLBACK)(xCurrentInputScaling_t* pxLocalCurrentInputScaling, int cmock_num_calls);
void eCurrentSensorsUpdateDatabaseLna_AddCallback(CMOCK_eCurrentSensorsUpdateDatabaseLna_CALLBACK Callback);
void eCurrentSensorsUpdateDatabaseLna_Stub(CMOCK_eCurrentSensorsUpdateDatabaseLna_CALLBACK Callback);
#define eCurrentSensorsUpdateDatabaseLna_StubWithCallback eCurrentSensorsUpdateDatabaseLna_Stub
#define eCurrentSensorsUpdateDatabaseLna_ExpectWithArrayAndReturn(pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval) eCurrentSensorsUpdateDatabaseLna_CMockExpectWithArrayAndReturn(__LINE__, pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval)
void eCurrentSensorsUpdateDatabaseLna_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, int pxLocalCurrentInputScaling_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseLna_ReturnThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling) eCurrentSensorsUpdateDatabaseLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, sizeof(xCurrentInputScaling_t))
#define eCurrentSensorsUpdateDatabaseLna_ReturnArrayThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_len) eCurrentSensorsUpdateDatabaseLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_len * sizeof(*pxLocalCurrentInputScaling))
#define eCurrentSensorsUpdateDatabaseLna_ReturnMemThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_size) eCurrentSensorsUpdateDatabaseLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_size)
void eCurrentSensorsUpdateDatabaseLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, size_t cmock_size);
#define eCurrentSensorsUpdateDatabaseLna_IgnoreArg_pxLocalCurrentInputScaling() eCurrentSensorsUpdateDatabaseLna_CMockIgnoreArg_pxLocalCurrentInputScaling(__LINE__)
void eCurrentSensorsUpdateDatabaseLna_CMockIgnoreArg_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsUpdateDatabaseHpa_IgnoreAndReturn(cmock_retval) eCurrentSensorsUpdateDatabaseHpa_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsUpdateDatabaseHpa_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseHpa_StopIgnore() eCurrentSensorsUpdateDatabaseHpa_CMockStopIgnore()
void eCurrentSensorsUpdateDatabaseHpa_CMockStopIgnore(void);
#define eCurrentSensorsUpdateDatabaseHpa_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensorsUpdateDatabaseHpa_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsUpdateDatabaseHpa_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseHpa_ExpectAndReturn(pxLocalCurrentInputScaling, cmock_retval) eCurrentSensorsUpdateDatabaseHpa_CMockExpectAndReturn(__LINE__, pxLocalCurrentInputScaling, cmock_retval)
void eCurrentSensorsUpdateDatabaseHpa_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensorsUpdateDatabaseHpa_CALLBACK)(xCurrentInputScaling_t* pxLocalCurrentInputScaling, int cmock_num_calls);
void eCurrentSensorsUpdateDatabaseHpa_AddCallback(CMOCK_eCurrentSensorsUpdateDatabaseHpa_CALLBACK Callback);
void eCurrentSensorsUpdateDatabaseHpa_Stub(CMOCK_eCurrentSensorsUpdateDatabaseHpa_CALLBACK Callback);
#define eCurrentSensorsUpdateDatabaseHpa_StubWithCallback eCurrentSensorsUpdateDatabaseHpa_Stub
#define eCurrentSensorsUpdateDatabaseHpa_ExpectWithArrayAndReturn(pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval) eCurrentSensorsUpdateDatabaseHpa_CMockExpectWithArrayAndReturn(__LINE__, pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval)
void eCurrentSensorsUpdateDatabaseHpa_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, int pxLocalCurrentInputScaling_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensorsUpdateDatabaseHpa_ReturnThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling) eCurrentSensorsUpdateDatabaseHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, sizeof(xCurrentInputScaling_t))
#define eCurrentSensorsUpdateDatabaseHpa_ReturnArrayThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_len) eCurrentSensorsUpdateDatabaseHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_len * sizeof(*pxLocalCurrentInputScaling))
#define eCurrentSensorsUpdateDatabaseHpa_ReturnMemThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_size) eCurrentSensorsUpdateDatabaseHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_size)
void eCurrentSensorsUpdateDatabaseHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, size_t cmock_size);
#define eCurrentSensorsUpdateDatabaseHpa_IgnoreArg_pxLocalCurrentInputScaling() eCurrentSensorsUpdateDatabaseHpa_CMockIgnoreArg_pxLocalCurrentInputScaling(__LINE__)
void eCurrentSensorsUpdateDatabaseHpa_CMockIgnoreArg_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
