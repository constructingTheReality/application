/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_POWERREADCHANNEL_H
#define _MOCK_POWERREADCHANNEL_H

#include "unity.h"
#include "powerReadChannel.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_powerReadChannel_Init(void);
void mock_powerReadChannel_Destroy(void);
void mock_powerReadChannel_Verify(void);




#define ePowerReadOffsetChannelRun_IgnoreAndReturn(cmock_retval) ePowerReadOffsetChannelRun_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ePowerReadOffsetChannelRun_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerReadOffsetChannelRun_StopIgnore() ePowerReadOffsetChannelRun_CMockStopIgnore()
void ePowerReadOffsetChannelRun_CMockStopIgnore(void);
#define ePowerReadOffsetChannelRun_ExpectAnyArgsAndReturn(cmock_retval) ePowerReadOffsetChannelRun_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ePowerReadOffsetChannelRun_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerReadOffsetChannelRun_ExpectAndReturn(pusInternalOffset, pusExternalOffset, pusExternalOffset1, cmock_retval) ePowerReadOffsetChannelRun_CMockExpectAndReturn(__LINE__, pusInternalOffset, pusExternalOffset, pusExternalOffset1, cmock_retval)
void ePowerReadOffsetChannelRun_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t* pusInternalOffset, uint16_t* pusExternalOffset, uint16_t* pusExternalOffset1, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_ePowerReadOffsetChannelRun_CALLBACK)(uint16_t* pusInternalOffset, uint16_t* pusExternalOffset, uint16_t* pusExternalOffset1, int cmock_num_calls);
void ePowerReadOffsetChannelRun_AddCallback(CMOCK_ePowerReadOffsetChannelRun_CALLBACK Callback);
void ePowerReadOffsetChannelRun_Stub(CMOCK_ePowerReadOffsetChannelRun_CALLBACK Callback);
#define ePowerReadOffsetChannelRun_StubWithCallback ePowerReadOffsetChannelRun_Stub
#define ePowerReadOffsetChannelRun_ExpectWithArrayAndReturn(pusInternalOffset, pusInternalOffset_Depth, pusExternalOffset, pusExternalOffset_Depth, pusExternalOffset1, pusExternalOffset1_Depth, cmock_retval) ePowerReadOffsetChannelRun_CMockExpectWithArrayAndReturn(__LINE__, pusInternalOffset, pusInternalOffset_Depth, pusExternalOffset, pusExternalOffset_Depth, pusExternalOffset1, pusExternalOffset1_Depth, cmock_retval)
void ePowerReadOffsetChannelRun_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t* pusInternalOffset, int pusInternalOffset_Depth, uint16_t* pusExternalOffset, int pusExternalOffset_Depth, uint16_t* pusExternalOffset1, int pusExternalOffset1_Depth, eMpbError_t cmock_to_return);
#define ePowerReadOffsetChannelRun_ReturnThruPtr_pusInternalOffset(pusInternalOffset) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusInternalOffset(__LINE__, pusInternalOffset, sizeof(uint16_t))
#define ePowerReadOffsetChannelRun_ReturnArrayThruPtr_pusInternalOffset(pusInternalOffset, cmock_len) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusInternalOffset(__LINE__, pusInternalOffset, cmock_len * sizeof(*pusInternalOffset))
#define ePowerReadOffsetChannelRun_ReturnMemThruPtr_pusInternalOffset(pusInternalOffset, cmock_size) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusInternalOffset(__LINE__, pusInternalOffset, cmock_size)
void ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusInternalOffset(UNITY_LINE_TYPE cmock_line, uint16_t* pusInternalOffset, size_t cmock_size);
#define ePowerReadOffsetChannelRun_ReturnThruPtr_pusExternalOffset(pusExternalOffset) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset(__LINE__, pusExternalOffset, sizeof(uint16_t))
#define ePowerReadOffsetChannelRun_ReturnArrayThruPtr_pusExternalOffset(pusExternalOffset, cmock_len) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset(__LINE__, pusExternalOffset, cmock_len * sizeof(*pusExternalOffset))
#define ePowerReadOffsetChannelRun_ReturnMemThruPtr_pusExternalOffset(pusExternalOffset, cmock_size) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset(__LINE__, pusExternalOffset, cmock_size)
void ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset(UNITY_LINE_TYPE cmock_line, uint16_t* pusExternalOffset, size_t cmock_size);
#define ePowerReadOffsetChannelRun_ReturnThruPtr_pusExternalOffset1(pusExternalOffset1) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset1(__LINE__, pusExternalOffset1, sizeof(uint16_t))
#define ePowerReadOffsetChannelRun_ReturnArrayThruPtr_pusExternalOffset1(pusExternalOffset1, cmock_len) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset1(__LINE__, pusExternalOffset1, cmock_len * sizeof(*pusExternalOffset1))
#define ePowerReadOffsetChannelRun_ReturnMemThruPtr_pusExternalOffset1(pusExternalOffset1, cmock_size) ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset1(__LINE__, pusExternalOffset1, cmock_size)
void ePowerReadOffsetChannelRun_CMockReturnMemThruPtr_pusExternalOffset1(UNITY_LINE_TYPE cmock_line, uint16_t* pusExternalOffset1, size_t cmock_size);
#define ePowerReadOffsetChannelRun_IgnoreArg_pusInternalOffset() ePowerReadOffsetChannelRun_CMockIgnoreArg_pusInternalOffset(__LINE__)
void ePowerReadOffsetChannelRun_CMockIgnoreArg_pusInternalOffset(UNITY_LINE_TYPE cmock_line);
#define ePowerReadOffsetChannelRun_IgnoreArg_pusExternalOffset() ePowerReadOffsetChannelRun_CMockIgnoreArg_pusExternalOffset(__LINE__)
void ePowerReadOffsetChannelRun_CMockIgnoreArg_pusExternalOffset(UNITY_LINE_TYPE cmock_line);
#define ePowerReadOffsetChannelRun_IgnoreArg_pusExternalOffset1() ePowerReadOffsetChannelRun_CMockIgnoreArg_pusExternalOffset1(__LINE__)
void ePowerReadOffsetChannelRun_CMockIgnoreArg_pusExternalOffset1(UNITY_LINE_TYPE cmock_line);
#define ePowerReadChannelRun_IgnoreAndReturn(cmock_retval) ePowerReadChannelRun_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ePowerReadChannelRun_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerReadChannelRun_StopIgnore() ePowerReadChannelRun_CMockStopIgnore()
void ePowerReadChannelRun_CMockStopIgnore(void);
#define ePowerReadChannelRun_ExpectAnyArgsAndReturn(cmock_retval) ePowerReadChannelRun_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ePowerReadChannelRun_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerReadChannelRun_ExpectAndReturn(xStream, usOffset, pxPowerInputScaling, pfPowerReaded, pusPowerRaw, cmock_retval) ePowerReadChannelRun_CMockExpectAndReturn(__LINE__, xStream, usOffset, pxPowerInputScaling, pfPowerReaded, pusPowerRaw, cmock_retval)
void ePowerReadChannelRun_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint16_t usOffset, xPowerInputScaling_t* pxPowerInputScaling, float* pfPowerReaded, uint16_t* pusPowerRaw, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_ePowerReadChannelRun_CALLBACK)(handle_t xStream, uint16_t usOffset, xPowerInputScaling_t* pxPowerInputScaling, float* pfPowerReaded, uint16_t* pusPowerRaw, int cmock_num_calls);
void ePowerReadChannelRun_AddCallback(CMOCK_ePowerReadChannelRun_CALLBACK Callback);
void ePowerReadChannelRun_Stub(CMOCK_ePowerReadChannelRun_CALLBACK Callback);
#define ePowerReadChannelRun_StubWithCallback ePowerReadChannelRun_Stub
#define ePowerReadChannelRun_ExpectWithArrayAndReturn(xStream, usOffset, pxPowerInputScaling, pxPowerInputScaling_Depth, pfPowerReaded, pfPowerReaded_Depth, pusPowerRaw, pusPowerRaw_Depth, cmock_retval) ePowerReadChannelRun_CMockExpectWithArrayAndReturn(__LINE__, xStream, usOffset, pxPowerInputScaling, pxPowerInputScaling_Depth, pfPowerReaded, pfPowerReaded_Depth, pusPowerRaw, pusPowerRaw_Depth, cmock_retval)
void ePowerReadChannelRun_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint16_t usOffset, xPowerInputScaling_t* pxPowerInputScaling, int pxPowerInputScaling_Depth, float* pfPowerReaded, int pfPowerReaded_Depth, uint16_t* pusPowerRaw, int pusPowerRaw_Depth, eMpbError_t cmock_to_return);
#define ePowerReadChannelRun_ReturnThruPtr_pxPowerInputScaling(pxPowerInputScaling) ePowerReadChannelRun_CMockReturnMemThruPtr_pxPowerInputScaling(__LINE__, pxPowerInputScaling, sizeof(xPowerInputScaling_t))
#define ePowerReadChannelRun_ReturnArrayThruPtr_pxPowerInputScaling(pxPowerInputScaling, cmock_len) ePowerReadChannelRun_CMockReturnMemThruPtr_pxPowerInputScaling(__LINE__, pxPowerInputScaling, cmock_len * sizeof(*pxPowerInputScaling))
#define ePowerReadChannelRun_ReturnMemThruPtr_pxPowerInputScaling(pxPowerInputScaling, cmock_size) ePowerReadChannelRun_CMockReturnMemThruPtr_pxPowerInputScaling(__LINE__, pxPowerInputScaling, cmock_size)
void ePowerReadChannelRun_CMockReturnMemThruPtr_pxPowerInputScaling(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxPowerInputScaling, size_t cmock_size);
#define ePowerReadChannelRun_ReturnThruPtr_pfPowerReaded(pfPowerReaded) ePowerReadChannelRun_CMockReturnMemThruPtr_pfPowerReaded(__LINE__, pfPowerReaded, sizeof(float))
#define ePowerReadChannelRun_ReturnArrayThruPtr_pfPowerReaded(pfPowerReaded, cmock_len) ePowerReadChannelRun_CMockReturnMemThruPtr_pfPowerReaded(__LINE__, pfPowerReaded, cmock_len * sizeof(*pfPowerReaded))
#define ePowerReadChannelRun_ReturnMemThruPtr_pfPowerReaded(pfPowerReaded, cmock_size) ePowerReadChannelRun_CMockReturnMemThruPtr_pfPowerReaded(__LINE__, pfPowerReaded, cmock_size)
void ePowerReadChannelRun_CMockReturnMemThruPtr_pfPowerReaded(UNITY_LINE_TYPE cmock_line, float* pfPowerReaded, size_t cmock_size);
#define ePowerReadChannelRun_ReturnThruPtr_pusPowerRaw(pusPowerRaw) ePowerReadChannelRun_CMockReturnMemThruPtr_pusPowerRaw(__LINE__, pusPowerRaw, sizeof(uint16_t))
#define ePowerReadChannelRun_ReturnArrayThruPtr_pusPowerRaw(pusPowerRaw, cmock_len) ePowerReadChannelRun_CMockReturnMemThruPtr_pusPowerRaw(__LINE__, pusPowerRaw, cmock_len * sizeof(*pusPowerRaw))
#define ePowerReadChannelRun_ReturnMemThruPtr_pusPowerRaw(pusPowerRaw, cmock_size) ePowerReadChannelRun_CMockReturnMemThruPtr_pusPowerRaw(__LINE__, pusPowerRaw, cmock_size)
void ePowerReadChannelRun_CMockReturnMemThruPtr_pusPowerRaw(UNITY_LINE_TYPE cmock_line, uint16_t* pusPowerRaw, size_t cmock_size);
#define ePowerReadChannelRun_IgnoreArg_xStream() ePowerReadChannelRun_CMockIgnoreArg_xStream(__LINE__)
void ePowerReadChannelRun_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define ePowerReadChannelRun_IgnoreArg_usOffset() ePowerReadChannelRun_CMockIgnoreArg_usOffset(__LINE__)
void ePowerReadChannelRun_CMockIgnoreArg_usOffset(UNITY_LINE_TYPE cmock_line);
#define ePowerReadChannelRun_IgnoreArg_pxPowerInputScaling() ePowerReadChannelRun_CMockIgnoreArg_pxPowerInputScaling(__LINE__)
void ePowerReadChannelRun_CMockIgnoreArg_pxPowerInputScaling(UNITY_LINE_TYPE cmock_line);
#define ePowerReadChannelRun_IgnoreArg_pfPowerReaded() ePowerReadChannelRun_CMockIgnoreArg_pfPowerReaded(__LINE__)
void ePowerReadChannelRun_CMockIgnoreArg_pfPowerReaded(UNITY_LINE_TYPE cmock_line);
#define ePowerReadChannelRun_IgnoreArg_pusPowerRaw() ePowerReadChannelRun_CMockIgnoreArg_pusPowerRaw(__LINE__)
void ePowerReadChannelRun_CMockIgnoreArg_pusPowerRaw(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
