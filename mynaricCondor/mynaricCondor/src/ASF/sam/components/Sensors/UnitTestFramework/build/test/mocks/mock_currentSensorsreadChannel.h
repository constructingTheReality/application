/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CURRENTSENSORSREADCHANNEL_H
#define _MOCK_CURRENTSENSORSREADCHANNEL_H

#include "unity.h"
#include "currentSensorsreadChannel.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_currentSensorsreadChannel_Init(void);
void mock_currentSensorsreadChannel_Destroy(void);
void mock_currentSensorsreadChannel_Verify(void);




#define eCurrentSensorsReadChannelRun_IgnoreAndReturn(cmock_retval) eCurrentSensorsReadChannelRun_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsReadChannelRun_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsReadChannelRun_StopIgnore() eCurrentSensorsReadChannelRun_CMockStopIgnore()
void eCurrentSensorsReadChannelRun_CMockStopIgnore(void);
#define eCurrentSensorsReadChannelRun_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensorsReadChannelRun_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsReadChannelRun_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsReadChannelRun_ExpectAndReturn(xStream, usOffset, xCurrentInputScaling, pfCurrentReadedInMa, pusCurrentRaw, cmock_retval) eCurrentSensorsReadChannelRun_CMockExpectAndReturn(__LINE__, xStream, usOffset, xCurrentInputScaling, pfCurrentReadedInMa, pusCurrentRaw, cmock_retval)
void eCurrentSensorsReadChannelRun_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint16_t usOffset, xCurrentInputScaling_t xCurrentInputScaling, float* pfCurrentReadedInMa, uint16_t* pusCurrentRaw, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensorsReadChannelRun_CALLBACK)(handle_t xStream, uint16_t usOffset, xCurrentInputScaling_t xCurrentInputScaling, float* pfCurrentReadedInMa, uint16_t* pusCurrentRaw, int cmock_num_calls);
void eCurrentSensorsReadChannelRun_AddCallback(CMOCK_eCurrentSensorsReadChannelRun_CALLBACK Callback);
void eCurrentSensorsReadChannelRun_Stub(CMOCK_eCurrentSensorsReadChannelRun_CALLBACK Callback);
#define eCurrentSensorsReadChannelRun_StubWithCallback eCurrentSensorsReadChannelRun_Stub
#define eCurrentSensorsReadChannelRun_ExpectWithArrayAndReturn(xStream, usOffset, xCurrentInputScaling, pfCurrentReadedInMa, pfCurrentReadedInMa_Depth, pusCurrentRaw, pusCurrentRaw_Depth, cmock_retval) eCurrentSensorsReadChannelRun_CMockExpectWithArrayAndReturn(__LINE__, xStream, usOffset, xCurrentInputScaling, pfCurrentReadedInMa, pfCurrentReadedInMa_Depth, pusCurrentRaw, pusCurrentRaw_Depth, cmock_retval)
void eCurrentSensorsReadChannelRun_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, handle_t xStream, uint16_t usOffset, xCurrentInputScaling_t xCurrentInputScaling, float* pfCurrentReadedInMa, int pfCurrentReadedInMa_Depth, uint16_t* pusCurrentRaw, int pusCurrentRaw_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensorsReadChannelRun_ReturnThruPtr_pfCurrentReadedInMa(pfCurrentReadedInMa) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pfCurrentReadedInMa(__LINE__, pfCurrentReadedInMa, sizeof(float))
#define eCurrentSensorsReadChannelRun_ReturnArrayThruPtr_pfCurrentReadedInMa(pfCurrentReadedInMa, cmock_len) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pfCurrentReadedInMa(__LINE__, pfCurrentReadedInMa, cmock_len * sizeof(*pfCurrentReadedInMa))
#define eCurrentSensorsReadChannelRun_ReturnMemThruPtr_pfCurrentReadedInMa(pfCurrentReadedInMa, cmock_size) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pfCurrentReadedInMa(__LINE__, pfCurrentReadedInMa, cmock_size)
void eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pfCurrentReadedInMa(UNITY_LINE_TYPE cmock_line, float* pfCurrentReadedInMa, size_t cmock_size);
#define eCurrentSensorsReadChannelRun_ReturnThruPtr_pusCurrentRaw(pusCurrentRaw) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pusCurrentRaw(__LINE__, pusCurrentRaw, sizeof(uint16_t))
#define eCurrentSensorsReadChannelRun_ReturnArrayThruPtr_pusCurrentRaw(pusCurrentRaw, cmock_len) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pusCurrentRaw(__LINE__, pusCurrentRaw, cmock_len * sizeof(*pusCurrentRaw))
#define eCurrentSensorsReadChannelRun_ReturnMemThruPtr_pusCurrentRaw(pusCurrentRaw, cmock_size) eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pusCurrentRaw(__LINE__, pusCurrentRaw, cmock_size)
void eCurrentSensorsReadChannelRun_CMockReturnMemThruPtr_pusCurrentRaw(UNITY_LINE_TYPE cmock_line, uint16_t* pusCurrentRaw, size_t cmock_size);
#define eCurrentSensorsReadChannelRun_IgnoreArg_xStream() eCurrentSensorsReadChannelRun_CMockIgnoreArg_xStream(__LINE__)
void eCurrentSensorsReadChannelRun_CMockIgnoreArg_xStream(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsReadChannelRun_IgnoreArg_usOffset() eCurrentSensorsReadChannelRun_CMockIgnoreArg_usOffset(__LINE__)
void eCurrentSensorsReadChannelRun_CMockIgnoreArg_usOffset(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsReadChannelRun_IgnoreArg_xCurrentInputScaling() eCurrentSensorsReadChannelRun_CMockIgnoreArg_xCurrentInputScaling(__LINE__)
void eCurrentSensorsReadChannelRun_CMockIgnoreArg_xCurrentInputScaling(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsReadChannelRun_IgnoreArg_pfCurrentReadedInMa() eCurrentSensorsReadChannelRun_CMockIgnoreArg_pfCurrentReadedInMa(__LINE__)
void eCurrentSensorsReadChannelRun_CMockIgnoreArg_pfCurrentReadedInMa(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsReadChannelRun_IgnoreArg_pusCurrentRaw() eCurrentSensorsReadChannelRun_CMockIgnoreArg_pusCurrentRaw(__LINE__)
void eCurrentSensorsReadChannelRun_CMockIgnoreArg_pusCurrentRaw(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
