/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_POWERSENSORSCONFIGUPDATE_H
#define _MOCK_POWERSENSORSCONFIGUPDATE_H

#include "unity.h"
#include "powerSensorsConfigUpdate.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_powerSensorsConfigUpdate_Init(void);
void mock_powerSensorsConfigUpdate_Destroy(void);
void mock_powerSensorsConfigUpdate_Verify(void);




#define ePowerSensorsConfigUpdateBooster_IgnoreAndReturn(cmock_retval) ePowerSensorsConfigUpdateBooster_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateBooster_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateBooster_StopIgnore() ePowerSensorsConfigUpdateBooster_CMockStopIgnore()
void ePowerSensorsConfigUpdateBooster_CMockStopIgnore(void);
#define ePowerSensorsConfigUpdateBooster_ExpectAnyArgsAndReturn(cmock_retval) ePowerSensorsConfigUpdateBooster_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateBooster_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateBooster_ExpectAndReturn(pxLocalPowerInputScaling, pxHpaLimitsConfig, pxHpaPowersConfig, pxLosValues, cmock_retval) ePowerSensorsConfigUpdateBooster_CMockExpectAndReturn(__LINE__, pxLocalPowerInputScaling, pxHpaLimitsConfig, pxHpaPowersConfig, pxLosValues, cmock_retval)
void ePowerSensorsConfigUpdateBooster_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, xHpaLimitsConfig_t* pxHpaLimitsConfig, xHpaPowersConfig_t* pxHpaPowersConfig, xLosValues_t* pxLosValues, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_ePowerSensorsConfigUpdateBooster_CALLBACK)(xPowerInputScaling_t* pxLocalPowerInputScaling, xHpaLimitsConfig_t* pxHpaLimitsConfig, xHpaPowersConfig_t* pxHpaPowersConfig, xLosValues_t* pxLosValues, int cmock_num_calls);
void ePowerSensorsConfigUpdateBooster_AddCallback(CMOCK_ePowerSensorsConfigUpdateBooster_CALLBACK Callback);
void ePowerSensorsConfigUpdateBooster_Stub(CMOCK_ePowerSensorsConfigUpdateBooster_CALLBACK Callback);
#define ePowerSensorsConfigUpdateBooster_StubWithCallback ePowerSensorsConfigUpdateBooster_Stub
#define ePowerSensorsConfigUpdateBooster_ExpectWithArrayAndReturn(pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, pxHpaLimitsConfig, pxHpaLimitsConfig_Depth, pxHpaPowersConfig, pxHpaPowersConfig_Depth, pxLosValues, pxLosValues_Depth, cmock_retval) ePowerSensorsConfigUpdateBooster_CMockExpectWithArrayAndReturn(__LINE__, pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, pxHpaLimitsConfig, pxHpaLimitsConfig_Depth, pxHpaPowersConfig, pxHpaPowersConfig_Depth, pxLosValues, pxLosValues_Depth, cmock_retval)
void ePowerSensorsConfigUpdateBooster_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, int pxLocalPowerInputScaling_Depth, xHpaLimitsConfig_t* pxHpaLimitsConfig, int pxHpaLimitsConfig_Depth, xHpaPowersConfig_t* pxHpaPowersConfig, int pxHpaPowersConfig_Depth, xLosValues_t* pxLosValues, int pxLosValues_Depth, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateBooster_ReturnThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, sizeof(xPowerInputScaling_t))
#define ePowerSensorsConfigUpdateBooster_ReturnArrayThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_len) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_len * sizeof(*pxLocalPowerInputScaling))
#define ePowerSensorsConfigUpdateBooster_ReturnMemThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_size) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_size)
void ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, size_t cmock_size);
#define ePowerSensorsConfigUpdateBooster_ReturnThruPtr_pxHpaLimitsConfig(pxHpaLimitsConfig) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaLimitsConfig(__LINE__, pxHpaLimitsConfig, sizeof(xHpaLimitsConfig_t))
#define ePowerSensorsConfigUpdateBooster_ReturnArrayThruPtr_pxHpaLimitsConfig(pxHpaLimitsConfig, cmock_len) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaLimitsConfig(__LINE__, pxHpaLimitsConfig, cmock_len * sizeof(*pxHpaLimitsConfig))
#define ePowerSensorsConfigUpdateBooster_ReturnMemThruPtr_pxHpaLimitsConfig(pxHpaLimitsConfig, cmock_size) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaLimitsConfig(__LINE__, pxHpaLimitsConfig, cmock_size)
void ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaLimitsConfig(UNITY_LINE_TYPE cmock_line, xHpaLimitsConfig_t* pxHpaLimitsConfig, size_t cmock_size);
#define ePowerSensorsConfigUpdateBooster_ReturnThruPtr_pxHpaPowersConfig(pxHpaPowersConfig) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaPowersConfig(__LINE__, pxHpaPowersConfig, sizeof(xHpaPowersConfig_t))
#define ePowerSensorsConfigUpdateBooster_ReturnArrayThruPtr_pxHpaPowersConfig(pxHpaPowersConfig, cmock_len) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaPowersConfig(__LINE__, pxHpaPowersConfig, cmock_len * sizeof(*pxHpaPowersConfig))
#define ePowerSensorsConfigUpdateBooster_ReturnMemThruPtr_pxHpaPowersConfig(pxHpaPowersConfig, cmock_size) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaPowersConfig(__LINE__, pxHpaPowersConfig, cmock_size)
void ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxHpaPowersConfig(UNITY_LINE_TYPE cmock_line, xHpaPowersConfig_t* pxHpaPowersConfig, size_t cmock_size);
#define ePowerSensorsConfigUpdateBooster_ReturnThruPtr_pxLosValues(pxLosValues) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLosValues(__LINE__, pxLosValues, sizeof(xLosValues_t))
#define ePowerSensorsConfigUpdateBooster_ReturnArrayThruPtr_pxLosValues(pxLosValues, cmock_len) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLosValues(__LINE__, pxLosValues, cmock_len * sizeof(*pxLosValues))
#define ePowerSensorsConfigUpdateBooster_ReturnMemThruPtr_pxLosValues(pxLosValues, cmock_size) ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLosValues(__LINE__, pxLosValues, cmock_size)
void ePowerSensorsConfigUpdateBooster_CMockReturnMemThruPtr_pxLosValues(UNITY_LINE_TYPE cmock_line, xLosValues_t* pxLosValues, size_t cmock_size);
#define ePowerSensorsConfigUpdateBooster_IgnoreArg_pxLocalPowerInputScaling() ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxLocalPowerInputScaling(__LINE__)
void ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line);
#define ePowerSensorsConfigUpdateBooster_IgnoreArg_pxHpaLimitsConfig() ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxHpaLimitsConfig(__LINE__)
void ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxHpaLimitsConfig(UNITY_LINE_TYPE cmock_line);
#define ePowerSensorsConfigUpdateBooster_IgnoreArg_pxHpaPowersConfig() ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxHpaPowersConfig(__LINE__)
void ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxHpaPowersConfig(UNITY_LINE_TYPE cmock_line);
#define ePowerSensorsConfigUpdateBooster_IgnoreArg_pxLosValues() ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxLosValues(__LINE__)
void ePowerSensorsConfigUpdateBooster_CMockIgnoreArg_pxLosValues(UNITY_LINE_TYPE cmock_line);
#define ePowerSensorsConfigUpdateLna_IgnoreAndReturn(cmock_retval) ePowerSensorsConfigUpdateLna_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateLna_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateLna_StopIgnore() ePowerSensorsConfigUpdateLna_CMockStopIgnore()
void ePowerSensorsConfigUpdateLna_CMockStopIgnore(void);
#define ePowerSensorsConfigUpdateLna_ExpectAnyArgsAndReturn(cmock_retval) ePowerSensorsConfigUpdateLna_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateLna_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateLna_ExpectAndReturn(pxLocalPowerInputScaling, cmock_retval) ePowerSensorsConfigUpdateLna_CMockExpectAndReturn(__LINE__, pxLocalPowerInputScaling, cmock_retval)
void ePowerSensorsConfigUpdateLna_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_ePowerSensorsConfigUpdateLna_CALLBACK)(xPowerInputScaling_t* pxLocalPowerInputScaling, int cmock_num_calls);
void ePowerSensorsConfigUpdateLna_AddCallback(CMOCK_ePowerSensorsConfigUpdateLna_CALLBACK Callback);
void ePowerSensorsConfigUpdateLna_Stub(CMOCK_ePowerSensorsConfigUpdateLna_CALLBACK Callback);
#define ePowerSensorsConfigUpdateLna_StubWithCallback ePowerSensorsConfigUpdateLna_Stub
#define ePowerSensorsConfigUpdateLna_ExpectWithArrayAndReturn(pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, cmock_retval) ePowerSensorsConfigUpdateLna_CMockExpectWithArrayAndReturn(__LINE__, pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, cmock_retval)
void ePowerSensorsConfigUpdateLna_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, int pxLocalPowerInputScaling_Depth, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateLna_ReturnThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling) ePowerSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, sizeof(xPowerInputScaling_t))
#define ePowerSensorsConfigUpdateLna_ReturnArrayThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_len) ePowerSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_len * sizeof(*pxLocalPowerInputScaling))
#define ePowerSensorsConfigUpdateLna_ReturnMemThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_size) ePowerSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_size)
void ePowerSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, size_t cmock_size);
#define ePowerSensorsConfigUpdateLna_IgnoreArg_pxLocalPowerInputScaling() ePowerSensorsConfigUpdateLna_CMockIgnoreArg_pxLocalPowerInputScaling(__LINE__)
void ePowerSensorsConfigUpdateLna_CMockIgnoreArg_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line);
#define ePowerSensorsConfigUpdateCommon_IgnoreAndReturn(cmock_retval) ePowerSensorsConfigUpdateCommon_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateCommon_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateCommon_StopIgnore() ePowerSensorsConfigUpdateCommon_CMockStopIgnore()
void ePowerSensorsConfigUpdateCommon_CMockStopIgnore(void);
#define ePowerSensorsConfigUpdateCommon_ExpectAnyArgsAndReturn(cmock_retval) ePowerSensorsConfigUpdateCommon_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ePowerSensorsConfigUpdateCommon_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateCommon_ExpectAndReturn(pxLocalPowerInputScaling, cmock_retval) ePowerSensorsConfigUpdateCommon_CMockExpectAndReturn(__LINE__, pxLocalPowerInputScaling, cmock_retval)
void ePowerSensorsConfigUpdateCommon_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_ePowerSensorsConfigUpdateCommon_CALLBACK)(xPowerInputScaling_t* pxLocalPowerInputScaling, int cmock_num_calls);
void ePowerSensorsConfigUpdateCommon_AddCallback(CMOCK_ePowerSensorsConfigUpdateCommon_CALLBACK Callback);
void ePowerSensorsConfigUpdateCommon_Stub(CMOCK_ePowerSensorsConfigUpdateCommon_CALLBACK Callback);
#define ePowerSensorsConfigUpdateCommon_StubWithCallback ePowerSensorsConfigUpdateCommon_Stub
#define ePowerSensorsConfigUpdateCommon_ExpectWithArrayAndReturn(pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, cmock_retval) ePowerSensorsConfigUpdateCommon_CMockExpectWithArrayAndReturn(__LINE__, pxLocalPowerInputScaling, pxLocalPowerInputScaling_Depth, cmock_retval)
void ePowerSensorsConfigUpdateCommon_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, int pxLocalPowerInputScaling_Depth, eMpbError_t cmock_to_return);
#define ePowerSensorsConfigUpdateCommon_ReturnThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling) ePowerSensorsConfigUpdateCommon_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, sizeof(xPowerInputScaling_t))
#define ePowerSensorsConfigUpdateCommon_ReturnArrayThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_len) ePowerSensorsConfigUpdateCommon_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_len * sizeof(*pxLocalPowerInputScaling))
#define ePowerSensorsConfigUpdateCommon_ReturnMemThruPtr_pxLocalPowerInputScaling(pxLocalPowerInputScaling, cmock_size) ePowerSensorsConfigUpdateCommon_CMockReturnMemThruPtr_pxLocalPowerInputScaling(__LINE__, pxLocalPowerInputScaling, cmock_size)
void ePowerSensorsConfigUpdateCommon_CMockReturnMemThruPtr_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line, xPowerInputScaling_t* pxLocalPowerInputScaling, size_t cmock_size);
#define ePowerSensorsConfigUpdateCommon_IgnoreArg_pxLocalPowerInputScaling() ePowerSensorsConfigUpdateCommon_CMockIgnoreArg_pxLocalPowerInputScaling(__LINE__)
void ePowerSensorsConfigUpdateCommon_CMockIgnoreArg_pxLocalPowerInputScaling(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
