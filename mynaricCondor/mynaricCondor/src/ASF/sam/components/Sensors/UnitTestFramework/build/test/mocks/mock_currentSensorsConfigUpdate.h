/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CURRENTSENSORSCONFIGUPDATE_H
#define _MOCK_CURRENTSENSORSCONFIGUPDATE_H

#include "unity.h"
#include "currentSensorsConfigUpdate.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_currentSensorsConfigUpdate_Init(void);
void mock_currentSensorsConfigUpdate_Destroy(void);
void mock_currentSensorsConfigUpdate_Verify(void);




#define eCurrentSensorsConfigUpdateLna_IgnoreAndReturn(cmock_retval) eCurrentSensorsConfigUpdateLna_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsConfigUpdateLna_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateLna_StopIgnore() eCurrentSensorsConfigUpdateLna_CMockStopIgnore()
void eCurrentSensorsConfigUpdateLna_CMockStopIgnore(void);
#define eCurrentSensorsConfigUpdateLna_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensorsConfigUpdateLna_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsConfigUpdateLna_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateLna_ExpectAndReturn(pxLocalCurrentInputScaling, cmock_retval) eCurrentSensorsConfigUpdateLna_CMockExpectAndReturn(__LINE__, pxLocalCurrentInputScaling, cmock_retval)
void eCurrentSensorsConfigUpdateLna_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensorsConfigUpdateLna_CALLBACK)(xCurrentInputScaling_t* pxLocalCurrentInputScaling, int cmock_num_calls);
void eCurrentSensorsConfigUpdateLna_AddCallback(CMOCK_eCurrentSensorsConfigUpdateLna_CALLBACK Callback);
void eCurrentSensorsConfigUpdateLna_Stub(CMOCK_eCurrentSensorsConfigUpdateLna_CALLBACK Callback);
#define eCurrentSensorsConfigUpdateLna_StubWithCallback eCurrentSensorsConfigUpdateLna_Stub
#define eCurrentSensorsConfigUpdateLna_ExpectWithArrayAndReturn(pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval) eCurrentSensorsConfigUpdateLna_CMockExpectWithArrayAndReturn(__LINE__, pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval)
void eCurrentSensorsConfigUpdateLna_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, int pxLocalCurrentInputScaling_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateLna_ReturnThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling) eCurrentSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, sizeof(xCurrentInputScaling_t))
#define eCurrentSensorsConfigUpdateLna_ReturnArrayThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_len) eCurrentSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_len * sizeof(*pxLocalCurrentInputScaling))
#define eCurrentSensorsConfigUpdateLna_ReturnMemThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_size) eCurrentSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_size)
void eCurrentSensorsConfigUpdateLna_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, size_t cmock_size);
#define eCurrentSensorsConfigUpdateLna_IgnoreArg_pxLocalCurrentInputScaling() eCurrentSensorsConfigUpdateLna_CMockIgnoreArg_pxLocalCurrentInputScaling(__LINE__)
void eCurrentSensorsConfigUpdateLna_CMockIgnoreArg_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line);
#define eCurrentSensorsConfigUpdateHpa_IgnoreAndReturn(cmock_retval) eCurrentSensorsConfigUpdateHpa_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsConfigUpdateHpa_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateHpa_StopIgnore() eCurrentSensorsConfigUpdateHpa_CMockStopIgnore()
void eCurrentSensorsConfigUpdateHpa_CMockStopIgnore(void);
#define eCurrentSensorsConfigUpdateHpa_ExpectAnyArgsAndReturn(cmock_retval) eCurrentSensorsConfigUpdateHpa_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eCurrentSensorsConfigUpdateHpa_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateHpa_ExpectAndReturn(pxLocalCurrentInputScaling, cmock_retval) eCurrentSensorsConfigUpdateHpa_CMockExpectAndReturn(__LINE__, pxLocalCurrentInputScaling, cmock_retval)
void eCurrentSensorsConfigUpdateHpa_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, eMpbError_t cmock_to_return);
typedef eMpbError_t (* CMOCK_eCurrentSensorsConfigUpdateHpa_CALLBACK)(xCurrentInputScaling_t* pxLocalCurrentInputScaling, int cmock_num_calls);
void eCurrentSensorsConfigUpdateHpa_AddCallback(CMOCK_eCurrentSensorsConfigUpdateHpa_CALLBACK Callback);
void eCurrentSensorsConfigUpdateHpa_Stub(CMOCK_eCurrentSensorsConfigUpdateHpa_CALLBACK Callback);
#define eCurrentSensorsConfigUpdateHpa_StubWithCallback eCurrentSensorsConfigUpdateHpa_Stub
#define eCurrentSensorsConfigUpdateHpa_ExpectWithArrayAndReturn(pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval) eCurrentSensorsConfigUpdateHpa_CMockExpectWithArrayAndReturn(__LINE__, pxLocalCurrentInputScaling, pxLocalCurrentInputScaling_Depth, cmock_retval)
void eCurrentSensorsConfigUpdateHpa_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, int pxLocalCurrentInputScaling_Depth, eMpbError_t cmock_to_return);
#define eCurrentSensorsConfigUpdateHpa_ReturnThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling) eCurrentSensorsConfigUpdateHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, sizeof(xCurrentInputScaling_t))
#define eCurrentSensorsConfigUpdateHpa_ReturnArrayThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_len) eCurrentSensorsConfigUpdateHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_len * sizeof(*pxLocalCurrentInputScaling))
#define eCurrentSensorsConfigUpdateHpa_ReturnMemThruPtr_pxLocalCurrentInputScaling(pxLocalCurrentInputScaling, cmock_size) eCurrentSensorsConfigUpdateHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(__LINE__, pxLocalCurrentInputScaling, cmock_size)
void eCurrentSensorsConfigUpdateHpa_CMockReturnMemThruPtr_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line, xCurrentInputScaling_t* pxLocalCurrentInputScaling, size_t cmock_size);
#define eCurrentSensorsConfigUpdateHpa_IgnoreArg_pxLocalCurrentInputScaling() eCurrentSensorsConfigUpdateHpa_CMockIgnoreArg_pxLocalCurrentInputScaling(__LINE__)
void eCurrentSensorsConfigUpdateHpa_CMockIgnoreArg_pxLocalCurrentInputScaling(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
