/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_DICTIONARYUTILS_H
#define _MOCK_DICTIONARYUTILS_H

#include "unity.h"
#include "dictionaryUtils.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_dictionaryUtils_Init(void);
void mock_dictionaryUtils_Destroy(void);
void mock_dictionaryUtils_Verify(void);




#define mpb_math_fdiv_IgnoreAndReturn(cmock_retval) mpb_math_fdiv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mpb_math_fdiv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define mpb_math_fdiv_StopIgnore() mpb_math_fdiv_CMockStopIgnore()
void mpb_math_fdiv_CMockStopIgnore(void);
#define mpb_math_fdiv_ExpectAnyArgsAndReturn(cmock_retval) mpb_math_fdiv_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mpb_math_fdiv_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define mpb_math_fdiv_ExpectAndReturn(numerator, denominator, cmock_retval) mpb_math_fdiv_CMockExpectAndReturn(__LINE__, numerator, denominator, cmock_retval)
void mpb_math_fdiv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float numerator, float denominator, float cmock_to_return);
typedef float (* CMOCK_mpb_math_fdiv_CALLBACK)(float numerator, float denominator, int cmock_num_calls);
void mpb_math_fdiv_AddCallback(CMOCK_mpb_math_fdiv_CALLBACK Callback);
void mpb_math_fdiv_Stub(CMOCK_mpb_math_fdiv_CALLBACK Callback);
#define mpb_math_fdiv_StubWithCallback mpb_math_fdiv_Stub
#define mpb_math_fdiv_IgnoreArg_numerator() mpb_math_fdiv_CMockIgnoreArg_numerator(__LINE__)
void mpb_math_fdiv_CMockIgnoreArg_numerator(UNITY_LINE_TYPE cmock_line);
#define mpb_math_fdiv_IgnoreArg_denominator() mpb_math_fdiv_CMockIgnoreArg_denominator(__LINE__)
void mpb_math_fdiv_CMockIgnoreArg_denominator(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreAndReturn(cmock_retval) mpb_math_flinear_approx_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mpb_math_flinear_approx_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define mpb_math_flinear_approx_StopIgnore() mpb_math_flinear_approx_CMockStopIgnore()
void mpb_math_flinear_approx_CMockStopIgnore(void);
#define mpb_math_flinear_approx_ExpectAnyArgsAndReturn(cmock_retval) mpb_math_flinear_approx_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mpb_math_flinear_approx_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define mpb_math_flinear_approx_ExpectAndReturn(x1, y1, x2, y2, x, coerce, cmock_retval) mpb_math_flinear_approx_CMockExpectAndReturn(__LINE__, x1, y1, x2, y2, x, coerce, cmock_retval)
void mpb_math_flinear_approx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float x1, float y1, float x2, float y2, float x, mpb_coerced_t coerce, float cmock_to_return);
typedef float (* CMOCK_mpb_math_flinear_approx_CALLBACK)(float x1, float y1, float x2, float y2, float x, mpb_coerced_t coerce, int cmock_num_calls);
void mpb_math_flinear_approx_AddCallback(CMOCK_mpb_math_flinear_approx_CALLBACK Callback);
void mpb_math_flinear_approx_Stub(CMOCK_mpb_math_flinear_approx_CALLBACK Callback);
#define mpb_math_flinear_approx_StubWithCallback mpb_math_flinear_approx_Stub
#define mpb_math_flinear_approx_IgnoreArg_x1() mpb_math_flinear_approx_CMockIgnoreArg_x1(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_x1(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreArg_y1() mpb_math_flinear_approx_CMockIgnoreArg_y1(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_y1(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreArg_x2() mpb_math_flinear_approx_CMockIgnoreArg_x2(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_x2(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreArg_y2() mpb_math_flinear_approx_CMockIgnoreArg_y2(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_y2(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreArg_x() mpb_math_flinear_approx_CMockIgnoreArg_x(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_x(UNITY_LINE_TYPE cmock_line);
#define mpb_math_flinear_approx_IgnoreArg_coerce() mpb_math_flinear_approx_CMockIgnoreArg_coerce(__LINE__)
void mpb_math_flinear_approx_CMockIgnoreArg_coerce(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_minor_than_float2_IgnoreAndReturn(cmock_retval) mpb_float1_minor_than_float2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mpb_float1_minor_than_float2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define mpb_float1_minor_than_float2_StopIgnore() mpb_float1_minor_than_float2_CMockStopIgnore()
void mpb_float1_minor_than_float2_CMockStopIgnore(void);
#define mpb_float1_minor_than_float2_ExpectAnyArgsAndReturn(cmock_retval) mpb_float1_minor_than_float2_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mpb_float1_minor_than_float2_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define mpb_float1_minor_than_float2_ExpectAndReturn(float1, float2, precision, cmock_retval) mpb_float1_minor_than_float2_CMockExpectAndReturn(__LINE__, float1, float2, precision, cmock_retval)
void mpb_float1_minor_than_float2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float float1, float float2, unsigned int precision, eBool_t cmock_to_return);
typedef eBool_t (* CMOCK_mpb_float1_minor_than_float2_CALLBACK)(float float1, float float2, unsigned int precision, int cmock_num_calls);
void mpb_float1_minor_than_float2_AddCallback(CMOCK_mpb_float1_minor_than_float2_CALLBACK Callback);
void mpb_float1_minor_than_float2_Stub(CMOCK_mpb_float1_minor_than_float2_CALLBACK Callback);
#define mpb_float1_minor_than_float2_StubWithCallback mpb_float1_minor_than_float2_Stub
#define mpb_float1_minor_than_float2_IgnoreArg_float1() mpb_float1_minor_than_float2_CMockIgnoreArg_float1(__LINE__)
void mpb_float1_minor_than_float2_CMockIgnoreArg_float1(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_minor_than_float2_IgnoreArg_float2() mpb_float1_minor_than_float2_CMockIgnoreArg_float2(__LINE__)
void mpb_float1_minor_than_float2_CMockIgnoreArg_float2(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_minor_than_float2_IgnoreArg_precision() mpb_float1_minor_than_float2_CMockIgnoreArg_precision(__LINE__)
void mpb_float1_minor_than_float2_CMockIgnoreArg_precision(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_equal_to_float2_IgnoreAndReturn(cmock_retval) mpb_float1_equal_to_float2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mpb_float1_equal_to_float2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define mpb_float1_equal_to_float2_StopIgnore() mpb_float1_equal_to_float2_CMockStopIgnore()
void mpb_float1_equal_to_float2_CMockStopIgnore(void);
#define mpb_float1_equal_to_float2_ExpectAnyArgsAndReturn(cmock_retval) mpb_float1_equal_to_float2_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void mpb_float1_equal_to_float2_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define mpb_float1_equal_to_float2_ExpectAndReturn(float1, float2, precision, cmock_retval) mpb_float1_equal_to_float2_CMockExpectAndReturn(__LINE__, float1, float2, precision, cmock_retval)
void mpb_float1_equal_to_float2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float float1, float float2, unsigned int precision, eBool_t cmock_to_return);
typedef eBool_t (* CMOCK_mpb_float1_equal_to_float2_CALLBACK)(float float1, float float2, unsigned int precision, int cmock_num_calls);
void mpb_float1_equal_to_float2_AddCallback(CMOCK_mpb_float1_equal_to_float2_CALLBACK Callback);
void mpb_float1_equal_to_float2_Stub(CMOCK_mpb_float1_equal_to_float2_CALLBACK Callback);
#define mpb_float1_equal_to_float2_StubWithCallback mpb_float1_equal_to_float2_Stub
#define mpb_float1_equal_to_float2_IgnoreArg_float1() mpb_float1_equal_to_float2_CMockIgnoreArg_float1(__LINE__)
void mpb_float1_equal_to_float2_CMockIgnoreArg_float1(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_equal_to_float2_IgnoreArg_float2() mpb_float1_equal_to_float2_CMockIgnoreArg_float2(__LINE__)
void mpb_float1_equal_to_float2_CMockIgnoreArg_float2(UNITY_LINE_TYPE cmock_line);
#define mpb_float1_equal_to_float2_IgnoreArg_precision() mpb_float1_equal_to_float2_CMockIgnoreArg_precision(__LINE__)
void mpb_float1_equal_to_float2_CMockIgnoreArg_precision(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
