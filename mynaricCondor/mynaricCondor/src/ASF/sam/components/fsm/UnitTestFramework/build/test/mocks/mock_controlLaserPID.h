/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CONTROLLASERPID_H
#define _MOCK_CONTROLLASERPID_H

#include "unity.h"
#include "controlLaserPID.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_controlLaserPID_Init(void);
void mock_controlLaserPID_Destroy(void);
void mock_controlLaserPID_Verify(void);




#define vControlLaserPIDInit_Ignore() vControlLaserPIDInit_CMockIgnore()
void vControlLaserPIDInit_CMockIgnore(void);
#define vControlLaserPIDInit_StopIgnore() vControlLaserPIDInit_CMockStopIgnore()
void vControlLaserPIDInit_CMockStopIgnore(void);
#define vControlLaserPIDInit_ExpectAnyArgs() vControlLaserPIDInit_CMockExpectAnyArgs(__LINE__)
void vControlLaserPIDInit_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDInit_Expect(ePIDID, ulAccLoopControlInterval, pxPidValues) vControlLaserPIDInit_CMockExpect(__LINE__, ePIDID, ulAccLoopControlInterval, pxPidValues)
void vControlLaserPIDInit_CMockExpect(UNITY_LINE_TYPE cmock_line, ePIDID_t ePIDID, uint32_t ulAccLoopControlInterval, xPidValues_t* pxPidValues);
typedef void (* CMOCK_vControlLaserPIDInit_CALLBACK)(ePIDID_t ePIDID, uint32_t ulAccLoopControlInterval, xPidValues_t* pxPidValues, int cmock_num_calls);
void vControlLaserPIDInit_AddCallback(CMOCK_vControlLaserPIDInit_CALLBACK Callback);
void vControlLaserPIDInit_Stub(CMOCK_vControlLaserPIDInit_CALLBACK Callback);
#define vControlLaserPIDInit_StubWithCallback vControlLaserPIDInit_Stub
#define vControlLaserPIDInit_ExpectWithArray(ePIDID, ulAccLoopControlInterval, pxPidValues, pxPidValues_Depth) vControlLaserPIDInit_CMockExpectWithArray(__LINE__, ePIDID, ulAccLoopControlInterval, pxPidValues, pxPidValues_Depth)
void vControlLaserPIDInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ePIDID_t ePIDID, uint32_t ulAccLoopControlInterval, xPidValues_t* pxPidValues, int pxPidValues_Depth);
#define vControlLaserPIDInit_ReturnThruPtr_pxPidValues(pxPidValues) vControlLaserPIDInit_CMockReturnMemThruPtr_pxPidValues(__LINE__, pxPidValues, sizeof(xPidValues_t))
#define vControlLaserPIDInit_ReturnArrayThruPtr_pxPidValues(pxPidValues, cmock_len) vControlLaserPIDInit_CMockReturnMemThruPtr_pxPidValues(__LINE__, pxPidValues, cmock_len * sizeof(*pxPidValues))
#define vControlLaserPIDInit_ReturnMemThruPtr_pxPidValues(pxPidValues, cmock_size) vControlLaserPIDInit_CMockReturnMemThruPtr_pxPidValues(__LINE__, pxPidValues, cmock_size)
void vControlLaserPIDInit_CMockReturnMemThruPtr_pxPidValues(UNITY_LINE_TYPE cmock_line, xPidValues_t* pxPidValues, size_t cmock_size);
#define vControlLaserPIDInit_IgnoreArg_ePIDID() vControlLaserPIDInit_CMockIgnoreArg_ePIDID(__LINE__)
void vControlLaserPIDInit_CMockIgnoreArg_ePIDID(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDInit_IgnoreArg_ulAccLoopControlInterval() vControlLaserPIDInit_CMockIgnoreArg_ulAccLoopControlInterval(__LINE__)
void vControlLaserPIDInit_CMockIgnoreArg_ulAccLoopControlInterval(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDInit_IgnoreArg_pxPidValues() vControlLaserPIDInit_CMockIgnoreArg_pxPidValues(__LINE__)
void vControlLaserPIDInit_CMockIgnoreArg_pxPidValues(UNITY_LINE_TYPE cmock_line);
#define vSetLnaPidDefaultValues_Ignore() vSetLnaPidDefaultValues_CMockIgnore()
void vSetLnaPidDefaultValues_CMockIgnore(void);
#define vSetLnaPidDefaultValues_StopIgnore() vSetLnaPidDefaultValues_CMockStopIgnore()
void vSetLnaPidDefaultValues_CMockStopIgnore(void);
#define vSetLnaPidDefaultValues_Expect() vSetLnaPidDefaultValues_CMockExpect(__LINE__)
void vSetLnaPidDefaultValues_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vSetLnaPidDefaultValues_CALLBACK)(int cmock_num_calls);
void vSetLnaPidDefaultValues_AddCallback(CMOCK_vSetLnaPidDefaultValues_CALLBACK Callback);
void vSetLnaPidDefaultValues_Stub(CMOCK_vSetLnaPidDefaultValues_CALLBACK Callback);
#define vSetLnaPidDefaultValues_StubWithCallback vSetLnaPidDefaultValues_Stub
#define vSetHpaPidDefaultValues_Ignore() vSetHpaPidDefaultValues_CMockIgnore()
void vSetHpaPidDefaultValues_CMockIgnore(void);
#define vSetHpaPidDefaultValues_StopIgnore() vSetHpaPidDefaultValues_CMockStopIgnore()
void vSetHpaPidDefaultValues_CMockStopIgnore(void);
#define vSetHpaPidDefaultValues_Expect() vSetHpaPidDefaultValues_CMockExpect(__LINE__)
void vSetHpaPidDefaultValues_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vSetHpaPidDefaultValues_CALLBACK)(int cmock_num_calls);
void vSetHpaPidDefaultValues_AddCallback(CMOCK_vSetHpaPidDefaultValues_CALLBACK Callback);
void vSetHpaPidDefaultValues_Stub(CMOCK_vSetHpaPidDefaultValues_CALLBACK Callback);
#define vSetHpaPidDefaultValues_StubWithCallback vSetHpaPidDefaultValues_Stub
#define vSetHpaPidNvmValues_Ignore() vSetHpaPidNvmValues_CMockIgnore()
void vSetHpaPidNvmValues_CMockIgnore(void);
#define vSetHpaPidNvmValues_StopIgnore() vSetHpaPidNvmValues_CMockStopIgnore()
void vSetHpaPidNvmValues_CMockStopIgnore(void);
#define vSetHpaPidNvmValues_Expect() vSetHpaPidNvmValues_CMockExpect(__LINE__)
void vSetHpaPidNvmValues_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vSetHpaPidNvmValues_CALLBACK)(int cmock_num_calls);
void vSetHpaPidNvmValues_AddCallback(CMOCK_vSetHpaPidNvmValues_CALLBACK Callback);
void vSetHpaPidNvmValues_Stub(CMOCK_vSetHpaPidNvmValues_CALLBACK Callback);
#define vSetHpaPidNvmValues_StubWithCallback vSetHpaPidNvmValues_Stub
#define vSetPidValues_Ignore() vSetPidValues_CMockIgnore()
void vSetPidValues_CMockIgnore(void);
#define vSetPidValues_StopIgnore() vSetPidValues_CMockStopIgnore()
void vSetPidValues_CMockStopIgnore(void);
#define vSetPidValues_ExpectAnyArgs() vSetPidValues_CMockExpectAnyArgs(__LINE__)
void vSetPidValues_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSetPidValues_Expect(eBeacon_Id, kp, ki, kd) vSetPidValues_CMockExpect(__LINE__, eBeacon_Id, kp, ki, kd)
void vSetPidValues_CMockExpect(UNITY_LINE_TYPE cmock_line, handle_t eBeacon_Id, float kp, float ki, float kd);
typedef void (* CMOCK_vSetPidValues_CALLBACK)(handle_t eBeacon_Id, float kp, float ki, float kd, int cmock_num_calls);
void vSetPidValues_AddCallback(CMOCK_vSetPidValues_CALLBACK Callback);
void vSetPidValues_Stub(CMOCK_vSetPidValues_CALLBACK Callback);
#define vSetPidValues_StubWithCallback vSetPidValues_Stub
#define vSetPidValues_IgnoreArg_eBeacon_Id() vSetPidValues_CMockIgnoreArg_eBeacon_Id(__LINE__)
void vSetPidValues_CMockIgnoreArg_eBeacon_Id(UNITY_LINE_TYPE cmock_line);
#define vSetPidValues_IgnoreArg_kp() vSetPidValues_CMockIgnoreArg_kp(__LINE__)
void vSetPidValues_CMockIgnoreArg_kp(UNITY_LINE_TYPE cmock_line);
#define vSetPidValues_IgnoreArg_ki() vSetPidValues_CMockIgnoreArg_ki(__LINE__)
void vSetPidValues_CMockIgnoreArg_ki(UNITY_LINE_TYPE cmock_line);
#define vSetPidValues_IgnoreArg_kd() vSetPidValues_CMockIgnoreArg_kd(__LINE__)
void vSetPidValues_CMockIgnoreArg_kd(UNITY_LINE_TYPE cmock_line);
#define vSetInternalPidValues_Ignore() vSetInternalPidValues_CMockIgnore()
void vSetInternalPidValues_CMockIgnore(void);
#define vSetInternalPidValues_StopIgnore() vSetInternalPidValues_CMockStopIgnore()
void vSetInternalPidValues_CMockStopIgnore(void);
#define vSetInternalPidValues_ExpectAnyArgs() vSetInternalPidValues_CMockExpectAnyArgs(__LINE__)
void vSetInternalPidValues_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vSetInternalPidValues_Expect(eBeacon_Id, kp, ki, kd) vSetInternalPidValues_CMockExpect(__LINE__, eBeacon_Id, kp, ki, kd)
void vSetInternalPidValues_CMockExpect(UNITY_LINE_TYPE cmock_line, handle_t eBeacon_Id, float kp, float ki, float kd);
typedef void (* CMOCK_vSetInternalPidValues_CALLBACK)(handle_t eBeacon_Id, float kp, float ki, float kd, int cmock_num_calls);
void vSetInternalPidValues_AddCallback(CMOCK_vSetInternalPidValues_CALLBACK Callback);
void vSetInternalPidValues_Stub(CMOCK_vSetInternalPidValues_CALLBACK Callback);
#define vSetInternalPidValues_StubWithCallback vSetInternalPidValues_Stub
#define vSetInternalPidValues_IgnoreArg_eBeacon_Id() vSetInternalPidValues_CMockIgnoreArg_eBeacon_Id(__LINE__)
void vSetInternalPidValues_CMockIgnoreArg_eBeacon_Id(UNITY_LINE_TYPE cmock_line);
#define vSetInternalPidValues_IgnoreArg_kp() vSetInternalPidValues_CMockIgnoreArg_kp(__LINE__)
void vSetInternalPidValues_CMockIgnoreArg_kp(UNITY_LINE_TYPE cmock_line);
#define vSetInternalPidValues_IgnoreArg_ki() vSetInternalPidValues_CMockIgnoreArg_ki(__LINE__)
void vSetInternalPidValues_CMockIgnoreArg_ki(UNITY_LINE_TYPE cmock_line);
#define vSetInternalPidValues_IgnoreArg_kd() vSetInternalPidValues_CMockIgnoreArg_kd(__LINE__)
void vSetInternalPidValues_CMockIgnoreArg_kd(UNITY_LINE_TYPE cmock_line);
#define vGetPidValues_Ignore() vGetPidValues_CMockIgnore()
void vGetPidValues_CMockIgnore(void);
#define vGetPidValues_StopIgnore() vGetPidValues_CMockStopIgnore()
void vGetPidValues_CMockStopIgnore(void);
#define vGetPidValues_ExpectAnyArgs() vGetPidValues_CMockExpectAnyArgs(__LINE__)
void vGetPidValues_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vGetPidValues_Expect(eBeacon_Id, kp, ki, kd) vGetPidValues_CMockExpect(__LINE__, eBeacon_Id, kp, ki, kd)
void vGetPidValues_CMockExpect(UNITY_LINE_TYPE cmock_line, handle_t eBeacon_Id, float* kp, float* ki, float* kd);
typedef void (* CMOCK_vGetPidValues_CALLBACK)(handle_t eBeacon_Id, float* kp, float* ki, float* kd, int cmock_num_calls);
void vGetPidValues_AddCallback(CMOCK_vGetPidValues_CALLBACK Callback);
void vGetPidValues_Stub(CMOCK_vGetPidValues_CALLBACK Callback);
#define vGetPidValues_StubWithCallback vGetPidValues_Stub
#define vGetPidValues_ExpectWithArray(eBeacon_Id, kp, kp_Depth, ki, ki_Depth, kd, kd_Depth) vGetPidValues_CMockExpectWithArray(__LINE__, eBeacon_Id, kp, kp_Depth, ki, ki_Depth, kd, kd_Depth)
void vGetPidValues_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, handle_t eBeacon_Id, float* kp, int kp_Depth, float* ki, int ki_Depth, float* kd, int kd_Depth);
#define vGetPidValues_ReturnThruPtr_kp(kp) vGetPidValues_CMockReturnMemThruPtr_kp(__LINE__, kp, sizeof(float))
#define vGetPidValues_ReturnArrayThruPtr_kp(kp, cmock_len) vGetPidValues_CMockReturnMemThruPtr_kp(__LINE__, kp, cmock_len * sizeof(*kp))
#define vGetPidValues_ReturnMemThruPtr_kp(kp, cmock_size) vGetPidValues_CMockReturnMemThruPtr_kp(__LINE__, kp, cmock_size)
void vGetPidValues_CMockReturnMemThruPtr_kp(UNITY_LINE_TYPE cmock_line, float* kp, size_t cmock_size);
#define vGetPidValues_ReturnThruPtr_ki(ki) vGetPidValues_CMockReturnMemThruPtr_ki(__LINE__, ki, sizeof(float))
#define vGetPidValues_ReturnArrayThruPtr_ki(ki, cmock_len) vGetPidValues_CMockReturnMemThruPtr_ki(__LINE__, ki, cmock_len * sizeof(*ki))
#define vGetPidValues_ReturnMemThruPtr_ki(ki, cmock_size) vGetPidValues_CMockReturnMemThruPtr_ki(__LINE__, ki, cmock_size)
void vGetPidValues_CMockReturnMemThruPtr_ki(UNITY_LINE_TYPE cmock_line, float* ki, size_t cmock_size);
#define vGetPidValues_ReturnThruPtr_kd(kd) vGetPidValues_CMockReturnMemThruPtr_kd(__LINE__, kd, sizeof(float))
#define vGetPidValues_ReturnArrayThruPtr_kd(kd, cmock_len) vGetPidValues_CMockReturnMemThruPtr_kd(__LINE__, kd, cmock_len * sizeof(*kd))
#define vGetPidValues_ReturnMemThruPtr_kd(kd, cmock_size) vGetPidValues_CMockReturnMemThruPtr_kd(__LINE__, kd, cmock_size)
void vGetPidValues_CMockReturnMemThruPtr_kd(UNITY_LINE_TYPE cmock_line, float* kd, size_t cmock_size);
#define vGetPidValues_IgnoreArg_eBeacon_Id() vGetPidValues_CMockIgnoreArg_eBeacon_Id(__LINE__)
void vGetPidValues_CMockIgnoreArg_eBeacon_Id(UNITY_LINE_TYPE cmock_line);
#define vGetPidValues_IgnoreArg_kp() vGetPidValues_CMockIgnoreArg_kp(__LINE__)
void vGetPidValues_CMockIgnoreArg_kp(UNITY_LINE_TYPE cmock_line);
#define vGetPidValues_IgnoreArg_ki() vGetPidValues_CMockIgnoreArg_ki(__LINE__)
void vGetPidValues_CMockIgnoreArg_ki(UNITY_LINE_TYPE cmock_line);
#define vGetPidValues_IgnoreArg_kd() vGetPidValues_CMockIgnoreArg_kd(__LINE__)
void vGetPidValues_CMockIgnoreArg_kd(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDReset_Ignore() vControlLaserPIDReset_CMockIgnore()
void vControlLaserPIDReset_CMockIgnore(void);
#define vControlLaserPIDReset_StopIgnore() vControlLaserPIDReset_CMockStopIgnore()
void vControlLaserPIDReset_CMockStopIgnore(void);
#define vControlLaserPIDReset_ExpectAnyArgs() vControlLaserPIDReset_CMockExpectAnyArgs(__LINE__)
void vControlLaserPIDReset_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDReset_Expect(ePIDID) vControlLaserPIDReset_CMockExpect(__LINE__, ePIDID)
void vControlLaserPIDReset_CMockExpect(UNITY_LINE_TYPE cmock_line, ePIDID_t ePIDID);
typedef void (* CMOCK_vControlLaserPIDReset_CALLBACK)(ePIDID_t ePIDID, int cmock_num_calls);
void vControlLaserPIDReset_AddCallback(CMOCK_vControlLaserPIDReset_CALLBACK Callback);
void vControlLaserPIDReset_Stub(CMOCK_vControlLaserPIDReset_CALLBACK Callback);
#define vControlLaserPIDReset_StubWithCallback vControlLaserPIDReset_Stub
#define vControlLaserPIDReset_IgnoreArg_ePIDID() vControlLaserPIDReset_CMockIgnoreArg_ePIDID(__LINE__)
void vControlLaserPIDReset_CMockIgnoreArg_ePIDID(UNITY_LINE_TYPE cmock_line);
#define bControlLaserDeltaTimeHasChanged_IgnoreAndReturn(cmock_retval) bControlLaserDeltaTimeHasChanged_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void bControlLaserDeltaTimeHasChanged_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define bControlLaserDeltaTimeHasChanged_StopIgnore() bControlLaserDeltaTimeHasChanged_CMockStopIgnore()
void bControlLaserDeltaTimeHasChanged_CMockStopIgnore(void);
#define bControlLaserDeltaTimeHasChanged_ExpectAnyArgsAndReturn(cmock_retval) bControlLaserDeltaTimeHasChanged_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void bControlLaserDeltaTimeHasChanged_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eBool_t cmock_to_return);
#define bControlLaserDeltaTimeHasChanged_ExpectAndReturn(ePIDID, ulDeltaTime, cmock_retval) bControlLaserDeltaTimeHasChanged_CMockExpectAndReturn(__LINE__, ePIDID, ulDeltaTime, cmock_retval)
void bControlLaserDeltaTimeHasChanged_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ePIDID_t ePIDID, uint32_t ulDeltaTime, eBool_t cmock_to_return);
typedef eBool_t (* CMOCK_bControlLaserDeltaTimeHasChanged_CALLBACK)(ePIDID_t ePIDID, uint32_t ulDeltaTime, int cmock_num_calls);
void bControlLaserDeltaTimeHasChanged_AddCallback(CMOCK_bControlLaserDeltaTimeHasChanged_CALLBACK Callback);
void bControlLaserDeltaTimeHasChanged_Stub(CMOCK_bControlLaserDeltaTimeHasChanged_CALLBACK Callback);
#define bControlLaserDeltaTimeHasChanged_StubWithCallback bControlLaserDeltaTimeHasChanged_Stub
#define bControlLaserDeltaTimeHasChanged_IgnoreArg_ePIDID() bControlLaserDeltaTimeHasChanged_CMockIgnoreArg_ePIDID(__LINE__)
void bControlLaserDeltaTimeHasChanged_CMockIgnoreArg_ePIDID(UNITY_LINE_TYPE cmock_line);
#define bControlLaserDeltaTimeHasChanged_IgnoreArg_ulDeltaTime() bControlLaserDeltaTimeHasChanged_CMockIgnoreArg_ulDeltaTime(__LINE__)
void bControlLaserDeltaTimeHasChanged_CMockIgnoreArg_ulDeltaTime(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDUpdate_Ignore() vControlLaserPIDUpdate_CMockIgnore()
void vControlLaserPIDUpdate_CMockIgnore(void);
#define vControlLaserPIDUpdate_StopIgnore() vControlLaserPIDUpdate_CMockStopIgnore()
void vControlLaserPIDUpdate_CMockStopIgnore(void);
#define vControlLaserPIDUpdate_ExpectAnyArgs() vControlLaserPIDUpdate_CMockExpectAnyArgs(__LINE__)
void vControlLaserPIDUpdate_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDUpdate_Expect(fReference, fReferenceFeedback, eBeaconId, pfControlCurrent) vControlLaserPIDUpdate_CMockExpect(__LINE__, fReference, fReferenceFeedback, eBeaconId, pfControlCurrent)
void vControlLaserPIDUpdate_CMockExpect(UNITY_LINE_TYPE cmock_line, float fReference, float fReferenceFeedback, uint8_t eBeaconId, float* pfControlCurrent);
typedef void (* CMOCK_vControlLaserPIDUpdate_CALLBACK)(float fReference, float fReferenceFeedback, uint8_t eBeaconId, float* pfControlCurrent, int cmock_num_calls);
void vControlLaserPIDUpdate_AddCallback(CMOCK_vControlLaserPIDUpdate_CALLBACK Callback);
void vControlLaserPIDUpdate_Stub(CMOCK_vControlLaserPIDUpdate_CALLBACK Callback);
#define vControlLaserPIDUpdate_StubWithCallback vControlLaserPIDUpdate_Stub
#define vControlLaserPIDUpdate_ExpectWithArray(fReference, fReferenceFeedback, eBeaconId, pfControlCurrent, pfControlCurrent_Depth) vControlLaserPIDUpdate_CMockExpectWithArray(__LINE__, fReference, fReferenceFeedback, eBeaconId, pfControlCurrent, pfControlCurrent_Depth)
void vControlLaserPIDUpdate_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, float fReference, float fReferenceFeedback, uint8_t eBeaconId, float* pfControlCurrent, int pfControlCurrent_Depth);
#define vControlLaserPIDUpdate_ReturnThruPtr_pfControlCurrent(pfControlCurrent) vControlLaserPIDUpdate_CMockReturnMemThruPtr_pfControlCurrent(__LINE__, pfControlCurrent, sizeof(float))
#define vControlLaserPIDUpdate_ReturnArrayThruPtr_pfControlCurrent(pfControlCurrent, cmock_len) vControlLaserPIDUpdate_CMockReturnMemThruPtr_pfControlCurrent(__LINE__, pfControlCurrent, cmock_len * sizeof(*pfControlCurrent))
#define vControlLaserPIDUpdate_ReturnMemThruPtr_pfControlCurrent(pfControlCurrent, cmock_size) vControlLaserPIDUpdate_CMockReturnMemThruPtr_pfControlCurrent(__LINE__, pfControlCurrent, cmock_size)
void vControlLaserPIDUpdate_CMockReturnMemThruPtr_pfControlCurrent(UNITY_LINE_TYPE cmock_line, float* pfControlCurrent, size_t cmock_size);
#define vControlLaserPIDUpdate_IgnoreArg_fReference() vControlLaserPIDUpdate_CMockIgnoreArg_fReference(__LINE__)
void vControlLaserPIDUpdate_CMockIgnoreArg_fReference(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDUpdate_IgnoreArg_fReferenceFeedback() vControlLaserPIDUpdate_CMockIgnoreArg_fReferenceFeedback(__LINE__)
void vControlLaserPIDUpdate_CMockIgnoreArg_fReferenceFeedback(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDUpdate_IgnoreArg_eBeaconId() vControlLaserPIDUpdate_CMockIgnoreArg_eBeaconId(__LINE__)
void vControlLaserPIDUpdate_CMockIgnoreArg_eBeaconId(UNITY_LINE_TYPE cmock_line);
#define vControlLaserPIDUpdate_IgnoreArg_pfControlCurrent() vControlLaserPIDUpdate_CMockIgnoreArg_pfControlCurrent(__LINE__)
void vControlLaserPIDUpdate_CMockIgnoreArg_pfControlCurrent(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
